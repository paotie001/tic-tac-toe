import tkinter as tk
from tkinter import messagebox


class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic Tac Toe 15x15")

        # Game state
        self.current_player = "X"
        self.board_size = 15
        self.board = [""] * (self.board_size ** 2)  # 15x15 grid

        # Create buttons for the grid
        self.buttons = [
            tk.Button(self.root, text="", font=("Arial", 12), width=2, height=2,
                      command=lambda i=i: self.on_button_click(i))
            for i in range(self.board_size ** 2)
        ]

        # Grid layout
        for i in range(self.board_size):
            for j in range(self.board_size):
                self.buttons[i * self.board_size + j].grid(row=i, column=j)

    def on_button_click(self, index):
        # Only allow click if the spot is empty and the game is not over
        if self.board[index] == "" and not self.check_winner():
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)
            if self.check_winner():
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                self.reset_game()
            elif "" not in self.board:
                messagebox.showinfo("Game Over", "It's a draw!")
                self.reset_game()
            else:
                # Switch players
                self.current_player = "O" if self.current_player == "X" else "X"

    def check_winner(self):
        # Winning combinations: need 5 in a row in any direction
        for row in range(self.board_size):
            for col in range(self.board_size):
                if self.board[row * self.board_size + col] != "":
                    if self.check_direction(row, col, 1, 0) or \
                            self.check_direction(row, col, 0, 1) or \
                            self.check_direction(row, col, 1, 1) or \
                            self.check_direction(row, col, 1, -1):
                        return True
        return False

    def check_direction(self, row, col, d_row, d_col):
        """Check if there are 5 consecutive marks in the given direction."""
        player = self.board[row * self.board_size + col]
        count = 0

        for i in range(5):
            r = row + i * d_row
            c = col + i * d_col
            if 0 <= r < self.board_size and 0 <= c < self.board_size:
                if self.board[r * self.board_size + c] == player:
                    count += 1
                else:
                    break
            else:
                break

        return count == 5

    def reset_game(self):
        self.board = [""] * (self.board_size ** 2)
        for button in self.buttons:
            button.config(text="")
        self.current_player = "X"


if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
